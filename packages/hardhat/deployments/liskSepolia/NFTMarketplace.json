{
  "address": "0xf947b7e6871Dd399228cd693c192dCb9144AFe8c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ItemCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct NFTMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftContract",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98a2d1a90454139ac1638912a3b6c8fb51f9a5c5856baec23cc6c9be1cc96a9c",
  "receipt": {
    "to": null,
    "from": "0x246e3f144441Ec07bAcb967A6Ed4C52655D420A5",
    "contractAddress": "0xf947b7e6871Dd399228cd693c192dCb9144AFe8c",
    "transactionIndex": 1,
    "gasUsed": "731721",
    "logsBloom": "0x
    "blockHash": "0x8e369e65d838e57252a6627dc401232991898ac54dc052ff881d6e28cc497912",
    "transactionHash": "0x98a2d1a90454139ac1638912a3b6c8fb51f9a5c5856baec23cc6c9be1cc96a9c",
    "logs": [],
    "blockNumber": 28261954,
    "cumulativeGasUsed": "777817",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4fbDd82F1C97344C280b3d8CCf3E70854DF023D7"
  ],
  "numDeployments": 2,
  "solcInputHash": "e95257f97f53be3c6ec0b7baeb4415cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ItemCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct NFTMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Sellers keep NFTs until sold, marketplace only needs approval\",\"kind\":\"dev\",\"methods\":{\"buyItem(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT to buy\"}},\"cancelListing(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT to cancel\"}},\"getListing(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT\"},\"returns\":{\"_0\":\"listing The listing struct\"}},\"isListed(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT\"},\"returns\":{\"_0\":\"bool True if listed and active\"}},\"listItem(uint256,uint256)\":{\"params\":{\"price\":\"The price in wei (ETH)\",\"tokenId\":\"The ID of the NFT to list\"}}},\"title\":\"NFTMarketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyItem(uint256)\":{\"notice\":\"Buy a listed NFT\"},\"cancelListing(uint256)\":{\"notice\":\"Cancel a listing\"},\"getListing(uint256)\":{\"notice\":\"Get listing information\"},\"isListed(uint256)\":{\"notice\":\"Check if an NFT is listed\"},\"listItem(uint256,uint256)\":{\"notice\":\"List an NFT for sale\"}},\"notice\":\"Simple escrowless NFT marketplace for MyNFT contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTMarketplace.sol\":\"NFTMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTMarketplace.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// import necessary contracts\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title NFTMarketplace\\r\\n * @notice Simple escrowless NFT marketplace for MyNFT contract\\r\\n * @dev Sellers keep NFTs until sold, marketplace only needs approval\\r\\n */\\r\\ncontract NFTMarketplace is ReentrancyGuard {\\r\\n    // Struct to store listing information\\r\\n    struct Listing {\\r\\n        address seller;\\r\\n        uint256 price;\\r\\n        bool isActive;\\r\\n    }\\r\\n    \\r\\n    // MyNFT contract address\\r\\n    IERC721 public nftContract;\\r\\n    \\r\\n    // Mapping to store listings\\r\\n    mapping(uint256 => Listing) public listings;\\r\\n    \\r\\n    // Events\\r\\n    event ItemListed(uint256 indexed tokenId, address indexed seller, uint256 price);\\r\\n    event ItemSold(uint256 indexed tokenId, address indexed buyer, address indexed seller, uint256 price);\\r\\n    event ItemCancelled(uint256 indexed tokenId, address indexed seller);\\r\\n    \\r\\n    // Constructor\\r\\n    constructor(address _nftContract) {\\r\\n        nftContract = IERC721(_nftContract);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n         * @notice List an NFT for sale\\r\\n         * @param tokenId The ID of the NFT to list\\r\\n         * @param price The price in wei (ETH)\\r\\n         */\\r\\n    function listItem(uint256 tokenId, uint256 price) external {\\r\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\r\\n        require(nftContract.ownerOf(tokenId) == msg.sender, \\\"You are not the owner of this NFT\\\");\\r\\n        require(\\r\\n            nftContract.getApproved(tokenId) == address(this) ||\\r\\n            nftContract.isApprovedForAll(msg.sender, address(this)), \\r\\n            \\\"Marketplace not approved\\\");\\r\\n        require(!listings[tokenId].isActive == true, \\\"Token already listed\\\");\\r\\n        \\r\\n        listings[tokenId] = Listing({\\r\\n            seller : msg.sender,\\r\\n            price : price,\\r\\n            isActive : true\\r\\n        });\\r\\n        \\r\\n        emit ItemListed(tokenId, msg.sender, price);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n        * @notice Buy a listed NFT\\r\\n        * @param tokenId The ID of the NFT to buy\\r\\n        */\\r\\n    function buyItem(uint256 tokenId) external payable nonReentrant {\\r\\n        Listing storage listing = listings[tokenId];\\r\\n        \\r\\n        require(listing.isActive, \\\"Item not listed\\\");\\r\\n        require(msg.value >= listing.price, \\\"Insufficient funds\\\");\\r\\n        require(nftContract.ownerOf(tokenId) == listing.seller, \\\"Seller is no longer owns NFT\\\");\\r\\n        \\r\\n        // Check - Effect - Interaction\\r\\n        listing.isActive = false; // Effect\\r\\n        \\r\\n        // interaction\\r\\n        nftContract.safeTransferFrom(listing.seller, msg.sender, tokenId);\\r\\n        \\r\\n        // transfer funds to seller\\r\\n        (bool success, ) = payable(listing.seller).call{value: listing.price}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n        \\r\\n        // refund excess payment\\r\\n        if (msg.value > listing.price) {\\r\\n            (bool refundSuccess, ) = payable(msg.sender).call{value: msg.value - listing.price}(\\\"\\\");\\r\\n            require(refundSuccess, \\\"Refund failed\\\");\\r\\n        }\\r\\n        \\r\\n        emit ItemSold(tokenId, msg.sender, listing.seller, listing.price);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n         * @notice Cancel a listing\\r\\n         * @param tokenId The ID of the NFT to cancel\\r\\n         */\\r\\n    function cancelListing(uint256 tokenId) external {\\r\\n        Listing storage listing = listings[tokenId];\\r\\n        \\r\\n        require(listing.isActive, \\\"Item not listed.\\\");\\r\\n        require(listing.seller == msg.sender, \\\"Only seller can cancel listing\\\");\\r\\n        \\r\\n        listing.isActive = false;\\r\\n        \\r\\n        emit ItemCancelled(tokenId, listing.seller);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n         * @notice Get listing information\\r\\n         * @param tokenId The ID of the NFT\\r\\n         * @return listing The listing struct\\r\\n         */\\r\\n    function getListing(uint256 tokenId) external view returns (Listing memory) {\\r\\n        return listings[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n         * @notice Check if an NFT is listed\\r\\n         * @param tokenId The ID of the NFT\\r\\n         * @return bool True if listed and active\\r\\n         */\\r\\n    function isListed(uint256 tokenId) external view returns (bool) {\\r\\n        return listings[tokenId].isActive;\\r\\n    }\\r\\n}\\r\\n    \\r\\n    \",\"keccak256\":\"0x1f5ae85bf0d3999fb3da96e5ac52f20ff562e612bfc5b8933a59604d88f5b944\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c05380380610c0583398101604081905261002f91610059565b6001600081905580546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b610b6d806100986000396000f3fe6080604052600436106100705760003560e01c8063d56d229d1161004e578063d56d229d1461015d578063de74e57b14610195578063e7fb74c714610206578063fcce48831461021957600080fd5b8063107a274a14610075578063305a67a81461011b578063883efa671461013d575b600080fd5b34801561008157600080fd5b506100e9610090366004610a83565b6040805160608082018352600080835260208084018290529284018190529384526002808352938390208351918201845280546001600160a01b0316825260018101549282019290925292015460ff1615159082015290565b6040805182516001600160a01b0316815260208084015190820152918101511515908201526060015b60405180910390f35b34801561012757600080fd5b5061013b610136366004610a83565b61025d565b005b34801561014957600080fd5b5061013b610158366004610a9c565b61035b565b34801561016957600080fd5b5060015461017d906001600160a01b031681565b6040516001600160a01b039091168152602001610112565b3480156101a157600080fd5b506101df6101b0366004610a83565b60026020819052600091825260409091208054600182015491909201546001600160a01b039092169160ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610112565b61013b610214366004610a83565b6106aa565b34801561022557600080fd5b5061024d610234366004610a83565b6000908152600260208190526040909120015460ff1690565b6040519015158152602001610112565b60008181526002602081905260409091209081015460ff166102b95760405162461bcd60e51b815260206004820152601060248201526f24ba32b6903737ba103634b9ba32b21760811b60448201526064015b60405180910390fd5b80546001600160a01b031633146103125760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792073656c6c65722063616e2063616e63656c206c697374696e67000060448201526064016102b0565b60028101805460ff1916905580546040516001600160a01b039091169083907ff69c7ea3f71dad86e17ba97a88b7e8f1708c0946bd98c7584e9942f60da8728e90600090a35050565b600081116103ab5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016102b0565b6001546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104189190610abe565b6001600160a01b0316146104785760405162461bcd60e51b815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f662074686973204e466044820152601560fa1b60648201526084016102b0565b60015460405163020604bf60e21b81526004810184905230916001600160a01b03169063081812fc90602401602060405180830381865afa1580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610abe565b6001600160a01b03161480610567575060015460405163e985e9c560e01b81523360048201523060248201526001600160a01b039091169063e985e9c590604401602060405180830381865afa158015610543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105679190610aee565b6105b35760405162461bcd60e51b815260206004820152601860248201527f4d61726b6574706c616365206e6f7420617070726f766564000000000000000060448201526064016102b0565b6000828152600260208190526040909120015460ff16156001146106105760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b1a5cdd195960621b60448201526064016102b0565b6040805160608101825233808252602080830185815260018486018181526000898152600280865290889020965187546001600160a01b0319166001600160a01b03909116178755925191860191909155519301805460ff191693151593909317909255915183815284917fc93edc6ee14cd6c0c2842099adfa8953b237dbdad304ba28e96dce8a7f2a828c910160405180910390a35050565b6106b2610a2a565b60008181526002602081905260409091209081015460ff166107085760405162461bcd60e51b815260206004820152600f60248201526e125d195b481b9bdd081b1a5cdd1959608a1b60448201526064016102b0565b80600101543410156107515760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016102b0565b80546001546040516331a9108f60e11b8152600481018590526001600160a01b039283169290911690636352211e90602401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c49190610abe565b6001600160a01b03161461081a5760405162461bcd60e51b815260206004820152601c60248201527f53656c6c6572206973206e6f206c6f6e676572206f776e73204e46540000000060448201526064016102b0565b60028101805460ff191690556001548154604051632142170760e11b81526001600160a01b039182166004820152336024820152604481018590529116906342842e0e90606401600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505082546001840154604051600094506001600160a01b039092169250908381818185875af1925050503d80600081146108e5576040519150601f19603f3d011682016040523d82523d6000602084013e6108ea565b606091505b505090508061092d5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016102b0565b81600101543411156109d1576001820154600090339061094d9034610b10565b604051600081818185875af1925050503d8060008114610989576040519150601f19603f3d011682016040523d82523d6000602084013e61098e565b606091505b50509050806109cf5760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b60448201526064016102b0565b505b815460018301546040519081526001600160a01b0390911690339085907f04ddd54c6b746e69ba87f862311f7670bd1d7276846778ac81cd38747b27a7469060200160405180910390a45050610a276001600055565b50565b600260005403610a7c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b0565b6002600055565b600060208284031215610a9557600080fd5b5035919050565b60008060408385031215610aaf57600080fd5b50508035926020909101359150565b600060208284031215610ad057600080fd5b81516001600160a01b0381168114610ae757600080fd5b9392505050565b600060208284031215610b0057600080fd5b81518015158114610ae757600080fd5b81810381811115610b3157634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212200fe0e0a50bd3784b5abec117446e489835416634ba4979a5898435e7e61e4ca664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063d56d229d1161004e578063d56d229d1461015d578063de74e57b14610195578063e7fb74c714610206578063fcce48831461021957600080fd5b8063107a274a14610075578063305a67a81461011b578063883efa671461013d575b600080fd5b34801561008157600080fd5b506100e9610090366004610a83565b6040805160608082018352600080835260208084018290529284018190529384526002808352938390208351918201845280546001600160a01b0316825260018101549282019290925292015460ff1615159082015290565b6040805182516001600160a01b0316815260208084015190820152918101511515908201526060015b60405180910390f35b34801561012757600080fd5b5061013b610136366004610a83565b61025d565b005b34801561014957600080fd5b5061013b610158366004610a9c565b61035b565b34801561016957600080fd5b5060015461017d906001600160a01b031681565b6040516001600160a01b039091168152602001610112565b3480156101a157600080fd5b506101df6101b0366004610a83565b60026020819052600091825260409091208054600182015491909201546001600160a01b039092169160ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610112565b61013b610214366004610a83565b6106aa565b34801561022557600080fd5b5061024d610234366004610a83565b6000908152600260208190526040909120015460ff1690565b6040519015158152602001610112565b60008181526002602081905260409091209081015460ff166102b95760405162461bcd60e51b815260206004820152601060248201526f24ba32b6903737ba103634b9ba32b21760811b60448201526064015b60405180910390fd5b80546001600160a01b031633146103125760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792073656c6c65722063616e2063616e63656c206c697374696e67000060448201526064016102b0565b60028101805460ff1916905580546040516001600160a01b039091169083907ff69c7ea3f71dad86e17ba97a88b7e8f1708c0946bd98c7584e9942f60da8728e90600090a35050565b600081116103ab5760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e20300000000060448201526064016102b0565b6001546040516331a9108f60e11b81526004810184905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104189190610abe565b6001600160a01b0316146104785760405162461bcd60e51b815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f662074686973204e466044820152601560fa1b60648201526084016102b0565b60015460405163020604bf60e21b81526004810184905230916001600160a01b03169063081812fc90602401602060405180830381865afa1580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190610abe565b6001600160a01b03161480610567575060015460405163e985e9c560e01b81523360048201523060248201526001600160a01b039091169063e985e9c590604401602060405180830381865afa158015610543573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105679190610aee565b6105b35760405162461bcd60e51b815260206004820152601860248201527f4d61726b6574706c616365206e6f7420617070726f766564000000000000000060448201526064016102b0565b6000828152600260208190526040909120015460ff16156001146106105760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88185b1c9958591e481b1a5cdd195960621b60448201526064016102b0565b6040805160608101825233808252602080830185815260018486018181526000898152600280865290889020965187546001600160a01b0319166001600160a01b03909116178755925191860191909155519301805460ff191693151593909317909255915183815284917fc93edc6ee14cd6c0c2842099adfa8953b237dbdad304ba28e96dce8a7f2a828c910160405180910390a35050565b6106b2610a2a565b60008181526002602081905260409091209081015460ff166107085760405162461bcd60e51b815260206004820152600f60248201526e125d195b481b9bdd081b1a5cdd1959608a1b60448201526064016102b0565b80600101543410156107515760405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b60448201526064016102b0565b80546001546040516331a9108f60e11b8152600481018590526001600160a01b039283169290911690636352211e90602401602060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c49190610abe565b6001600160a01b03161461081a5760405162461bcd60e51b815260206004820152601c60248201527f53656c6c6572206973206e6f206c6f6e676572206f776e73204e46540000000060448201526064016102b0565b60028101805460ff191690556001548154604051632142170760e11b81526001600160a01b039182166004820152336024820152604481018590529116906342842e0e90606401600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505082546001840154604051600094506001600160a01b039092169250908381818185875af1925050503d80600081146108e5576040519150601f19603f3d011682016040523d82523d6000602084013e6108ea565b606091505b505090508061092d5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016102b0565b81600101543411156109d1576001820154600090339061094d9034610b10565b604051600081818185875af1925050503d8060008114610989576040519150601f19603f3d011682016040523d82523d6000602084013e61098e565b606091505b50509050806109cf5760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b60448201526064016102b0565b505b815460018301546040519081526001600160a01b0390911690339085907f04ddd54c6b746e69ba87f862311f7670bd1d7276846778ac81cd38747b27a7469060200160405180910390a45050610a276001600055565b50565b600260005403610a7c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102b0565b6002600055565b600060208284031215610a9557600080fd5b5035919050565b60008060408385031215610aaf57600080fd5b50508035926020909101359150565b600060208284031215610ad057600080fd5b81516001600160a01b0381168114610ae757600080fd5b9392505050565b600060208284031215610b0057600080fd5b81518015158114610ae757600080fd5b81810381811115610b3157634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212200fe0e0a50bd3784b5abec117446e489835416634ba4979a5898435e7e61e4ca664736f6c63430008110033",
  "devdoc": {
    "details": "Sellers keep NFTs until sold, marketplace only needs approval",
    "kind": "dev",
    "methods": {
      "buyItem(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT to buy"
        }
      },
      "cancelListing(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT to cancel"
        }
      },
      "getListing(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT"
        },
        "returns": {
          "_0": "listing The listing struct"
        }
      },
      "isListed(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT"
        },
        "returns": {
          "_0": "bool True if listed and active"
        }
      },
      "listItem(uint256,uint256)": {
        "params": {
          "price": "The price in wei (ETH)",
          "tokenId": "The ID of the NFT to list"
        }
      }
    },
    "title": "NFTMarketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyItem(uint256)": {
        "notice": "Buy a listed NFT"
      },
      "cancelListing(uint256)": {
        "notice": "Cancel a listing"
      },
      "getListing(uint256)": {
        "notice": "Get listing information"
      },
      "isListed(uint256)": {
        "notice": "Check if an NFT is listed"
      },
      "listItem(uint256,uint256)": {
        "notice": "List an NFT for sale"
      }
    },
    "notice": "Simple escrowless NFT marketplace for MyNFT contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "nftContract",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC721)180"
      },
      {
        "astId": 214,
        "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
        "label": "listings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Listing)206_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC721)180": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Listing)206_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)206_storage"
      },
      "t_struct(Listing)206_storage": {
        "encoding": "inplace",
        "label": "struct NFTMarketplace.Listing",
        "members": [
          {
            "astId": 201,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 203,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 205,
            "contract": "contracts/NFTMarketplace.sol:NFTMarketplace",
            "label": "isActive",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}